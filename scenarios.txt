# Scenario 1

## Goal
A git repo named e4l is successfully created.  


## Pre-conditions
- Gitlab is up and running  
- A user account different from root has been created
  - username: vagrant
  - password: 12345678

  
## Main Success Scenario
1. Log in to GitLab using a NO root account
2. Create project and name it e4l
3. Follow the instructions to create the remote and local repositories as indicated by gitlab.
4. Commit and push to the remote repository.


## Notes
- In GitLab a project is a repository.




# Scenario 2

## Goal
The pipeline is successfully executed.  


## Pre-conditions
- Up and Run gitlab & gitlab runner
- Created project repository on gitlab

  
## Main Success Scenario
1. Clone created repository from gitlab
2. Add `.gitlab-ci.yml` with following content

```
image: gradle:6.7.1

stages:
  - build
  - test
  - upload
  - deploy
  - frontend-build
  - frontend-upload
  - frontend-deploy

cache:
  paths:
    - lu.uni.e4l.platform.api.dev/build/libs/
    - lu.uni.e4l.platform.api.dev/.gradle/

build_app:
  stage: build
  script:
    - cd lu.uni.e4l.platform.api.dev/
    - ./gradlew wrapper
    - chmod +x gradlew
    - ./gradlew clean
    - ./gradlew build
  artifacts:
    name: "backend"
    paths:
    - lu.uni.e4l.platform.api.dev/build/libs/*.jar

test_app:
  stage: test
  script:
    - cd lu.uni.e4l.platform.api.dev/
    - ./gradlew test

build_frontend:
  stage: frontend-build
  script:
    - cd lu.uni.e4l.platform.frontend.dev/
    - npm run build

frontend_upload:
    stage: frontend-upload
    tags:
    - integration
    script:
    - echo "Deploy review app"
    artifacts:
        name: "frontend"
        paths:
        - lu.uni.e4l.platform.frontend.dev/e4l.frontend/web/dist/*

deploy:
    stage: deploy
    tags:
    - integration-shell
    script:
    - cp lu.uni.e4l.platform.api.dev/build/libs/*.jar /home/vagrant/artefact-repository

frontend_deploy:
    stage: frontend-deploy
    tags:
    - integration-shell
    script:
    - cp -r lu.uni.e4l.platform.frontend.dev/e4l.frontend/web/dist/* /home/vagrant/artefact-repository/frontend

```

3. Push file to gitlab repository
4. Go to project's pipelines and wait until the pipeline has finished its execution.


# Scenario 3

## Goal
The development environment is successfully executed.  


## Pre-conditions
- vagrant up using the playbook.
- Writing and testing code.
- Debugging and fixing issues.
- Integration testing to ensure components work together.
- Experimenting with new features and improvements.

  
## Main Success Scenario
- developers work on code changes, test new features, and ensure the software is ready for deployment to production.



# Scenario 4

## Goal
The staging environment is successfully executed.  

## Pre-conditions
- vagrant up and Run gitlab & gitlab runner
- get to artifact-repository
- copy the e4l-server.jar using scp command
- run this following command:
```bash
java -jar e4l-server.jar
```
  
## Main Success Scenario
- It ensures the reliability, stability, and quality of software releases while minimizing the impact on end-users in the production environment.


# Scenario 5

## Goal
The production environment is successfully executed.  

## Pre-conditions
- vagrant up
- Running the application for end-users.

## Main Success Scenario
- open the product in your browser using 192.168.56.94:8080

